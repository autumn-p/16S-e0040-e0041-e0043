referenceASV <- "config/referenceASVs-e0026.txt"  # Reference ASVs
# Read in dataframe
datae0041raw <- read.table(dataframePath, header=TRUE, stringsAsFactors = FALSE)
getwd()
setwd("C:/Users/aparr/16S-e0041-e0043")
getwd()
# Set up file paths
outPath <- "analysis/out-cleaned"   # Output directory
dataframePath <- "data/ps_all.txt.gz"  # Raw data
appendCol_path <- "data/metadatae0041.tsv"  # Metadata
KCHpalette_path <- "config/KCHcolors-Silva-partial.txt"  # Color palette
referenceASV <- "config/referenceASVs-e0026.txt"  # Reference ASVs
# Read in dataframe
datae0041raw <- read.table(dataframePath, header=TRUE, stringsAsFactors = FALSE)
# Remove unnecessary columns for analysis
datae0041 <- datae0041raw %>%
dplyr::select(plate, well, OTU, Kingdom, Phylum, Class, Order, Family, Genus, count, relAbundance)
# Adding "subject" column based on the "plate" column
datae0041 <- datae0041 %>%
mutate(subject = ifelse(plate == "e0041-A-5", "XEA", ifelse(plate == "e0041-B-5", "XBA", NA)))
# Import metadata table
appendCol <- read.table(appendCol_path, header = TRUE)
# Join the metadata table to the original data frame
datae0041meta <- left_join(datae0041, appendCol, by=c("well", "subject"))
# Filter the data frame to include only rows with relAbundance greater than 0.1%
datae0041meta <- datae0041meta %>% filter(relAbundance > 0.001)
# Raw alpha diversity and alpha diversity w/ limit of detection by well
alpha_diversity_e0041 <- datae0041meta %>%
group_by(subject, well) %>%
summarize(alpha_diversity_e0041 = sum(count > 0))
# Join alpha_diversity to the original table
datae0041meta <- datae0041meta %>%
left_join(alpha_diversity_e0041, by = c('subject', 'well'))
# Import the color palette
KCHpalette <- read.table(KCHpalette_path, header = TRUE)
# Create a stripped-down color palette containing only the families present in the dataset
datae0041meta <- datae0041meta %>%
mutate(fullSilvataxonomy=paste(Kingdom, Phylum, Class, Order, Family, sep="."))
KCHpalettee0041 <- KCHpalette %>%
mutate(taxaNoDashes=gsub("-",".",taxa)) %>%
filter(taxa %in% sort(unique(datae0041meta$fullSilvataxonomy)) |
taxaNoDashes %in% (sort(unique(datae0041meta$fullSilvataxonomy)))) %>%
mutate(taxashort=ifelse(taxashort=="", gsub(".*\\.","",taxa), taxashort))
# Make a named list
KCHpalettee0041vector <- KCHpalettee0041$hex
names(KCHpalettee0041vector) <- KCHpalettee0041$taxashort
# Create an empty data frame to store the results
result_data <- tibble()
# Annotate every donor ASV with its ability to colonize the recipient in the mixture community
dataColonizationSuccess <- foreach(i = unique(datae0041meta %>% filter(donor != "blank" & recipient == "blank") %>% pull(well)), .combine = "rbind") %do% {
print(i)
# Subset the data for the current donor community
subset_data <- datae0041meta %>% filter(well == i)
i_donor <- unique(subset_data$donor)
i_replicate <- unique(subset_data$replicate)
# Finding corresponding wells based on the donor well
corresponding_preabx_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-pre" & replicate == i_replicate)
corresponding_postabxV1_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-post-V1" & replicate == i_replicate)
corresponding_preabx_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-pre" & replicate == i_replicate)
corresponding_postabxV1_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-post-V1" & replicate == i_replicate)
# Incorporate logic directly into subset_data using mutate
subset_data <- subset_data %>%
mutate(
Colonization_Preabx = OTU %in% unique(corresponding_preabx_well$OTU) & !(OTU %in% unique(corresponding_preabx_only_well$OTU)),
Colonization_PostabxV1 = OTU %in% unique(corresponding_postabxV1_well$OTU) & !(OTU %in% unique(corresponding_postabxV1_only_well$OTU)),
Uncertain_Colonization = (OTU %in% unique(corresponding_preabx_only_well$OTU)) | (OTU %in% unique(corresponding_postabxV1_only_well$OTU)),
Not_Colonizing = !(OTU %in% unique(corresponding_preabx_well$OTU)) | !(OTU %in% unique(corresponding_postabxV1_well$OTU))
)
print(subset_data)
# Append the result to the overall data frame
result_data <- bind_rows(result_data, subset_data)
}
# Create the donor_colonizer_type column
result_data <- result_data %>%
mutate(donor_colonizer_type = case_when(
Colonization_Preabx & Colonization_PostabxV1  ~ "Universal_Colonizer",
(Colonization_Preabx & !Colonization_PostabxV1) | (!Colonization_Preabx & Colonization_PostabxV1) ~ "Conditional_Colonizer",
Uncertain_Colonization ~ "Uncertain_Colonizer",
Not_Colonizing ~ "Did_Not_Colonize",
TRUE ~ NA_character_
))
# Save result_data table to out-cleaned folder
write.table(result_data, paste0(outPath, "/result_data.txt"), row.names = FALSE, quote = FALSE)
# Progress since last meeting with Kat
# Normalize counts within each family
result_data_normalized <- result_data %>%
group_by(Family) %>%
mutate(Normalized_Count = Count / sum(Count)) %>%
ungroup()
# Count the number of colonizers in each category across all donors
colonizer_counts <- result_data %>%
group_by(donor_colonizer_type) %>%
summarize(count = n())
# Print results
print(colonizer_counts)
# Progress since last meeting with Kat
# Normalize counts within each family
result_data_normalized <- result_data %>%
group_by(Family) %>%
mutate(Normalized_Count = Count / sum(Count)) %>%
ungroup()
# Progress since last meeting with Kat
# Normalizes the counts within each family based on the total number of rows for each combination of Family and donor_colonizer_type
result_data_normalized <- result_data %>%
group_by(Family, donor_colonizer_type) %>%
mutate(Normalized_Count = 1 / n()) %>%
ungroup()
# Bar plot across faceted families with normalized counts
Colonization_across_families_faceted_normalized_plot <- result_data_normalized %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = Family, y = Normalized_Count), stat = "identity", position = "dodge") +
facet_wrap(~Family) +
labs(title = "Normalized Colonization Status Across Families",
x = "Donor Colonizer Type",
y = "Normalized Count") +
scale_fill_manual(values = KCHpalettee0041vector) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Colonization_across_families_faceted_normalized_plot
# ORRR
# Normalize counts within each family
result_data_normalized <- result_data %>%
group_by(Family) %>%
mutate(Normalized_Count = sum(!is.na(donor_colonizer))) %>%
ungroup()
# ORRR
# Normalize counts within each family
result_data_normalized <- result_data %>%
group_by(Family) %>%
mutate(Normalized_Count = sum(!is.na(donor_colonizer_type))) %>%
ungroup()
# Bar plot across faceted families with normalized counts
Colonization_across_families_faceted_normalized_plot <- result_data_normalized %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = Family, y = Normalized_Count), stat = "identity", position = "dodge") +
facet_wrap(~Family) +
labs(title = "Normalized Colonization Status Across Families",
x = "Donor Colonizer Type",
y = "Normalized Count") +
scale_fill_manual(values = KCHpalettee0041vector) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Colonization_across_families_faceted_normalized_plot
# Bar plot across faceted families with normalized counts
Colonization_combo_across_families_faceted_normalized_plot <- result_data_normalized %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = Family, y = Normalized_Count), stat = "identity", position = "dodge") +
facet_wrap(~Family) +
labs(title = "Normalized Colonization Status Across Families",
x = "Donor Colonizer Type",
y = "Normalized Count") +
scale_fill_manual(values = KCHpalettee0041vector) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Colonization_combo_across_families_faceted_normalized_plot
# Progress since last meeting with Kat
# Normalizes the counts within each family based on the total number of rows for each
# combination of Family and donor_colonizer_type and makes all total to 1
result_data_normalized <- result_data %>%
group_by(Family, donor_colonizer_type) %>%
mutate(Normalized_Count = 1 / n()) %>%
ungroup()
# Bar plot across faceted families with normalized counts
Colonization_combo_across_families_faceted_normalized_plot <- result_data_normalized %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = Family, y = Normalized_Count), stat = "identity", position = "dodge") +
facet_wrap(~Family) +
labs(title = "Normalized Colonization Status Across Families",
x = "Donor Colonizer Type",
y = "Normalized Count") +
scale_fill_manual(values = KCHpalettee0041vector) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Colonization_combo_across_families_faceted_normalized_plot
# Save plot
save_plot(paste0(outPath, "/Colonization_combo_across_families_faceted_normalized_plot.png"), Colonization_combo_across_families_faceted_normalized_plot, base_width = 15, base_height = 10)
column_headers <- names(result_data)
names(result_data)
# Distribution of donor_colonizer_type per donor and corresponding wells
cleaned_donor_colonizer_distribution_plot <- datae0041meta %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ subject + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal()
cleaned_donor_colonizer_distribution_plot
# Distribution of donor_colonizer_type per donor and corresponding wells
cleaned_donor_colonizer_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ subject + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal()
cleaned_donor_colonizer_distribution_plot
# Distribution of donor_colonizer_type per donor and corresponding wells
cleaned_donor_colonizer_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ donor + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal()
cleaned_donor_colonizer_distribution_plot
# Distribution of donor_colonizer_type per donor and corresponding wells
cleaned_donor_colonizer_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ donor + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
cleaned_donor_colonizer_distribution_plot
# Distribution of donor_colonizer_type per donor and corresponding wells
cleaned_donor_colonizer_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ donor + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
cleaned_donor_colonizer_distribution_plot
# Distribution of donor_colonizer_type per donor and corresponding wells
cleaned_donor_colonizer_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ donor + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
cleaned_donor_colonizer_distribution_plot
# Save plot
save_plot(paste0(outPath, "/cleaned_donor_colonizer_distribution_plot.png"), cleaned_donor_colonizer_distribution_plot, base_width = 15, base_height = 20)
View(datae0041meta)
# Distribution of donor_colonizer_type per donor and corresponding wells
replicate_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_grid(replicate ~ donor + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Replicate and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels
replicate_distribution_plot
# Distribution of donor_colonizer_type per donor and corresponding wells
replicate_distribution_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_grid(replicate ~ donor + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Replicate and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels
replicate_distribution_plot
# Save plot
save_plot(paste0(outPath, "/replicate_distribution_plot.png"), replicate_distribution_plot, base_width = 15, base_height = 20)
# Save plot
save_plot(paste0(outPath, "/replicate_distribution_plot.png"), replicate_distribution_plot, base_width = 15, base_height = 10)
# Distribution of donor_colonizer_type per donor and corresponding wells
replicate_adjusted_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_grid(subject ~ replicate + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Subject, Replicate, and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels
replicate_adjusted_plot
# Save plot
save_plot(paste0(outPath, "/replicate_adjusted_plot.png"), replicate_adjusted_plot, base_width = 15, base_height = 10)
# Distribution of donor_colonizer_type per donor and corresponding wells
replicate_adjusted_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_grid(donor ~ replicate + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Subject, Replicate, and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels
replicate_adjusted_plot
# Save plot
save_plot(paste0(outPath, "/replicate_adjusted_plot.png"), replicate_adjusted_plot, base_width = 15, base_height = 10)
# Distribution of donor_colonizer_type per donor and corresponding wells
replicate_adjusted_plot <- result_data %>%
ggplot(aes(x = donor_colonizer_type, fill = donor_colonizer_type)) +
geom_bar(position = "dodge") +
facet_grid(donor ~ replicate + well, scales = "free") +
labs(title = "Distribution of Donor Colonizer Type per Donor, Replicate, and Corresponding Wells",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
replicate_adjusted_plot
# Save plot
save_plot(paste0(outPath, "/replicate_adjusted_plot.png"), replicate_adjusted_plot, base_width = 15, base_height = 10)
# Bar plot of colonization types within Sutterellaceae
colonization_sutte_plot <- sutterellaceae_data %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = donor_colonizer_type), position = "dodge") +
labs(title = "Colonization Status Within Sutterellaceae",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Subset data for Sutterellaceae
sutterellaceae_data <- result_data %>% filter(Family == "Sutterellaceae")
# Bar plot of colonization types within Sutterellaceae
colonization_sutte_plot <- sutterellaceae_data %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = donor_colonizer_type), position = "dodge") +
labs(title = "Colonization Status Within Sutterellaceae",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
colonization_sutte_plot
View(datae0041meta)
View(subset_data)
# Subset data for Sutterellaceae in pre-antibiotic and post-antibioticV1
sutterellaceae_pre <- result_data %>% filter(Family == "Sutterellaceae" & Replicate == "Pre")
sutterellaceae_postV1 <- result_data %>% filter(Family == "Sutterellaceae" & Replicate == "PostV1")
# Subset data for Sutterellaceae in pre-antibiotic and post-antibioticV1
sutterellaceae_pre <- result_data %>% filter(Family == "Sutterellaceae" & Colonization_Preabx == TRUE)
sutterellaceae_postV1 <- result_data %>% filter(Family == "Sutterellaceae" & Colonization_PostabxV1 == TRUE)
# Bar plot for colonization types in Sutterellaceae pre and post-antibioticV1
sutte_colonization_pre_post_plot <- bind_rows(mutate(sutterellaceae_pre, AntibioticStatus = "Pre"),
mutate(sutterellaceae_postV1, AntibioticStatus = "PostV1")) %>%
ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = AntibioticStatus), position = "dodge") +
labs(title = "Colonization Status in Sutterellaceae - Pre vs. Post-AntibioticV1",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sutte_colonization_pre_post_plot
# Save plot
save_plot(paste0(outPath, "/sutte_colonization_pre_post_plot.png"), sutte_colonization_pre_post_plot, base_width = 15, base_height = 10)
# Bar plot for colonization types in Sutterellaceae pre and post-antibioticV1
sutte_colonization_pre_post_plot <- result_data %>%
filter(Family == "Sutterellaceae" & (Colonization_Preabx == TRUE | Colonization_PostabxV1 == TRUE)) %>%
ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = ifelse(Colonization_Preabx, "Pre", "PostV1")), position = "dodge") +
labs(title = "Colonization Status in Sutterellaceae - Pre vs. Post-AntibioticV1",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sutte_colonization_pre_post_plot
# Subset data for Rikenellaceae in pre-antibiotic and post-antibioticV1
rikenellaceae_pre <- result_data %>%
filter(Family == "Rikenellaceae" & Colonization_Preabx == TRUE)
rikenellaceae_postV1 <- result_data %>%
filter(Family == "Rikenellaceae" & Colonization_PostabxV1 == TRUE)
# Bar plot for colonization types in Rikenellaceae pre and post-antibioticV1
rikenellaceae_pre_post_plot <- bind_rows(mutate(rikenellaceae_pre, AntibioticStatus = "Pre"),
mutate(rikenellaceae_postV1, AntibioticStatus = "PostV1")) %>%
ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = AntibioticStatus), position = "dodge") +
labs(title = "Colonization Status in Rikenellaceae - Pre vs. Post-AntibioticV1",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
rikenellaceae_pre_post_plot
# Save plot
save_plot(paste0(outPath, "/rikenellaceae_pre_post_plot.png"), rikenellaceae_pre_post_plot, base_width = 15, base_height = 10)
# Subset data for Erysipelotrichaceae in pre-antibiotic and post-antibioticV1
erysipelotrichaceae_pre <- result_data %>%
filter(Family == "Erysipelotrichaceae" & Colonization_Preabx == TRUE)
erysipelotrichaceae_postV1 <- result_data %>%
filter(Family == "Erysipelotrichaceae" & Colonization_PostabxV1 == TRUE)
# Bar plot for colonization types in Erysipelotrichaceae pre and post-antibioticV1
erysipelotrichaceae_pre_post_plot <- bind_rows(mutate(erysipelotrichaceae_pre, AntibioticStatus = "Pre"),
mutate(erysipelotrichaceae_postV1, AntibioticStatus = "PostV1")) %>%
ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = AntibioticStatus), position = "dodge") +
labs(title = "Colonization Status in Erysipelotrichaceae - Pre vs. Post-AntibioticV1",
x = "Donor Colonizer Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
erysipelotrichaceae_pre_post_plot
# Save plot
save_plot(paste0(outPath, "/erysipelotrichaceae_pre_post_plot.png"), erysipelotrichaceae_pre_post_plot, base_width = 15, base_height = 10)
names(datae0041meta)
# Annotate every donor ASV with its ability to colonize the recipient in the mixture community
postV2dataColonizationSuccess <- foreach(i = unique(datae0041meta %>% filter(donor != "blank" & recipient == "blank") %>% pull(well)), .combine = "rbind") %do% {
print(i)
# Subset the data for the current donor community
postV2_subset_data <- datae0041meta %>% filter(well == i)
i_donor <- unique(postV2_subset_data$donor)
i_replicate <- unique(postV2_subset_data$replicate)
# Finding corresponding wells based on the donor well
corresponding_preabx_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-pre" & replicate == i_replicate)
corresponding_postabxV1_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-post-V1" & replicate == i_replicate)
corresponding_postabxV2_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-post-V2" & replicate == i_replicate)
corresponding_preabx_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-pre" & replicate == i_replicate)
corresponding_postabxV1_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-post-V1" & replicate == i_replicate)
corresponding_postabxV2_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-post-V2" & replicate == i_replicate)
# Incorporate logic directly into subset_data using mutate
postV2_subset_data <- postV2_subset_data %>%
mutate(
Colonization_Preabx = OTU %in% unique(corresponding_preabx_well$OTU) & !(OTU %in% unique(corresponding_preabx_only_well$OTU)),
Colonization_PostabxV1 = OTU %in% unique(corresponding_postabxV1_well$OTU) & !(OTU %in% unique(corresponding_postabxV1_only_well$OTU)),
Colonization_PostabxV2 = OTU %in% unique(corresponding_postabxV2_well$OTU) & !(OTU %in% unique(corresponding_postabxV2_only_well$OTU)),
Uncertain_Colonization = (OTU %in% unique(corresponding_preabx_only_well$OTU)) | (OTU %in% unique(corresponding_postabxV1_only_well$OTU)) | (OTU %in% unique(corresponding_postabxV2_only_well$OTU)),
Not_Colonizing = !(OTU %in% unique(corresponding_preabx_well$OTU)) | !(OTU %in% unique(corresponding_postabxV1_well$OTU)) | !(OTU %in% unique(corresponding_postabxV2_well$OTU))
)
print(postV2_subset_data)
# Append the result to the overall data frame
postV2_result_data <- bind_rows(postV2_result_data, postV2_subset_data)
}
# Initialize an empty data frame for postV2_result_data
postV2_result_data <- data.frame()
# Annotate every donor ASV with its ability to colonize the recipient in the mixture community
postV2dataColonizationSuccess <- foreach(i = unique(datae0041meta %>% filter(donor != "blank" & recipient == "blank") %>% pull(well)), .combine = "rbind") %do% {
print(i)
# Subset the data for the current donor community
postV2_subset_data <- datae0041meta %>% filter(well == i)
i_donor <- unique(postV2_subset_data$donor)
i_replicate <- unique(postV2_subset_data$replicate)
# Finding corresponding wells based on the donor well
corresponding_preabx_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-pre" & replicate == i_replicate)
corresponding_postabxV1_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-post-V1" & replicate == i_replicate)
corresponding_postabxV2_well <- datae0041meta %>%
filter(donor == i_donor & recipient == "XEA-post-V2" & replicate == i_replicate)
corresponding_preabx_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-pre" & replicate == i_replicate)
corresponding_postabxV1_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-post-V1" & replicate == i_replicate)
corresponding_postabxV2_only_well <- datae0041meta %>%
filter(donor == "blank" & recipient == "XEA-post-V2" & replicate == i_replicate)
# Incorporate logic directly into subset_data using mutate
postV2_subset_data <- postV2_subset_data %>%
mutate(
Colonization_Preabx = OTU %in% unique(corresponding_preabx_well$OTU) & !(OTU %in% unique(corresponding_preabx_only_well$OTU)),
Colonization_PostabxV1 = OTU %in% unique(corresponding_postabxV1_well$OTU) & !(OTU %in% unique(corresponding_postabxV1_only_well$OTU)),
Colonization_PostabxV2 = OTU %in% unique(corresponding_postabxV2_well$OTU) & !(OTU %in% unique(corresponding_postabxV2_only_well$OTU)),
Uncertain_Colonization = (OTU %in% unique(corresponding_preabx_only_well$OTU)) | (OTU %in% unique(corresponding_postabxV1_only_well$OTU)) | (OTU %in% unique(corresponding_postabxV2_only_well$OTU)),
Not_Colonizing = !(OTU %in% unique(corresponding_preabx_well$OTU)) | !(OTU %in% unique(corresponding_postabxV1_well$OTU)) | !(OTU %in% unique(corresponding_postabxV2_well$OTU))
)
print(postV2_subset_data)
# Append the result to the overall data frame
postV2_result_data <- bind_rows(postV2_result_data, postV2_subset_data)
}
# Create the donor_colonizer_type column
postV2_result_data <- postV2_result_data %>%
mutate(donor_colonizer_type = case_when(
Colonization_Preabx & Colonization_PostabxV1  & Colonization_PostabxV2 ~ "Universal_Colonizer",
(Colonization_Preabx & !Colonization_PostabxV1 & !Colonization_PostabxV2) | (!Colonization_Preabx & Colonization_PostabxV1 & !Colonization_PostabxV2) | (!Colonization_Preabx & !Colonization_PostabxV1 & Colonization_PostabxV2)~ "Conditional_Colonizer",
Uncertain_Colonization ~ "Uncertain_Colonizer",
Not_Colonizing ~ "Did_Not_Colonize",
TRUE ~ NA_character_
))
View(postV2_result_data)
# Subset data for each family in postV1 and postV2
family_postV1 <- postV2_result_data %>% filter(Colonization_PostabxV1 == TRUE)
family_postV2 <- postV2_result_data %>% filter(Colonization_PostabxV2 == TRUE)
# Combine data for plotting
family_comparison <- bind_rows(mutate(family_postV1, AntibioticStatus = "PostV1"),
mutate(family_postV2, AntibioticStatus = "PostV2"))
# Create the bar plot
family_colonization_comparison_plot <- family_comparison %>%
ggplot(aes(x = Family, fill = AntibioticStatus)) +
geom_bar(position = "dodge") +
labs(title = "Colonization Status Comparison between PostV1 and PostV2 by Family",
x = "Family",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Display the plot
print(family_colonization_comparison_plot)
# Save plot
save_plot(paste0(outPath, "/family_colonization_comparison_plot.png"), family_colonization_comparison_plot, base_width = 15, base_height = 10)
# Progress since last meeting with Kat
# Normalizes the counts within each family based on the total number of rows for each
# combination of Family and donor_colonizer_type and makes all total to 1
result_data_normalized <- result_data %>%
group_by(Family, donor_colonizer_type) %>%
mutate(Normalized_Count = 1 / n()) %>%
ungroup()
# Bar plot across faceted families with normalized counts
Colonization_combo_across_families_faceted_normalized_plot <- result_data_normalized %>% ggplot() +
geom_bar(aes(x = donor_colonizer_type, fill = Family, y = Normalized_Count), stat = "identity", position = "dodge") +
facet_wrap(~Family) +
labs(title = "Normalized Colonization Status Across Families",
x = "Donor Colonizer Type",
y = "Normalized Count") +
scale_fill_manual(values = KCHpalettee0041vector) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Colonization_combo_across_families_faceted_normalized_plot
