postAbxV1_yes = sum(can_colonize_postAbxV1 == "yes"),
postAbxV1_no = sum(can_colonize_postAbxV1 == "no"),
postAbxV2_yes = sum(can_colonize_postAbxV2 == "yes"),
postAbxV2_no = sum(can_colonize_postAbxV2 == "no")
)
View(dataASVorigin1.0_summary)
# Create new columns for ability to colonize pre/postv1/postv2
dataASVorigin1.0 <- dataASVorigin %>%
filter(community_mixture == "donor+recipient") %>%
mutate(
can_colonize_preAbx = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-pre",
"Yes",
"No"
),
can_colonize_postAbxV1 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V1",
"Yes",
"No"
),
can_colonize_postAbxV2 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V2",
"Yes",
"No"
)
)
# Calculate the percent success for each ASV
data_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "yes"),
total_colonize_percent = total_colonize_count / 3 * 100
) %>%
select(ASVnum, Family, total_colonize_percent)
# Create a plot to visualize ASV colonization success
colonization_plot <- ggplot(data_summary, aes(x = reorder(Family, total_colonize_percent), y = total_colonize_percent, fill = Family)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Family", y = "Colonization Success (%)", title = "ASV Colonization Success by Family") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Display the plot
print(colonization_plot)
# Calculate the percent success for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "yes"),
total_colonize_percent = total_colonize_count / 3 * 100
) %>%
select(ASVnum, Family, total_colonize_percent) %>%
pivot_longer(cols = starts_with("can_colonize"), names_to = "community", values_to = "colonize_status")
# Calculate the percent success for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "yes"),
total_colonize_percent = total_colonize_count / 3 * 100
) %>%
select(ASVnum, Family, total_colonize_percent) %>%
pivot_longer(cols = starts_with("can_colonize"), names_to = "recipient", values_to = "colonization_status")
colnames(dataASVorigin1.0)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "yes"),
total_colonize_percent = total_colonize_count / 3 * 100
)
View(dataASVorigin1.0_summary)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "yes"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize"))),
total_colonize_percent = total_colonize_count / 3 * 100
)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "yes"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# Create new columns for ability to colonize pre/postv1/postv2
dataASVorigin1.0 <- dataASVorigin %>%
filter(community_mixture == "donor+recipient") %>%
mutate(
can_colonize_preAbx = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-pre",
"1",
"0"
),
can_colonize_postAbxV1 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V1",
"1",
"0"
),
can_colonize_postAbxV2 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V2",
"1",
"0"
)
)
# Create new columns for ability to colonize pre/postv1/postv2
dataASVorigin1.0 <- dataASVorigin %>%
filter(community_mixture == "donor+recipient") %>%
mutate(
can_colonize_preAbx = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-pre",
"Yes",
"No"
),
can_colonize_postAbxV1 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V1",
"Yes",
"No"
),
can_colonize_postAbxV2 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V2",
"Yes",
"No"
)
)
# Create new columns for ability to colonize pre/postv1/postv2
dataASVorigin1.0 <- dataASVorigin %>%
filter(community_mixture == "donor+recipient") %>%
mutate(
can_colonize_preAbx = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-pre",
"1",
"0"
),
can_colonize_postAbxV1 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V1",
"1",
"0"
),
can_colonize_postAbxV2 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V2",
"1",
"0"
)
)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
dataASVorigin1.0_summary <- dataASVorigin1.0_summary %>%
select(ASVnum, Family, starts_with("can_colonize")) %>%
pivot_longer(cols = starts_with("can_colonize"), names_to = "recipient", values_to = "colonization_status")
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# Bar plot totalling the colonization instances
colors <- c("preAbx" = "red", "postAbxV1" = "blue", "postAbxV2" = "green")
colonization_success_plot <- dataASVorigin1.0_summary %>%
group_by(Family, recipient) %>%
summarize(mean_colonization_percent = mean(total_colonize_percent),
total_instances = n()) %>%
ggplot() +
geom_bar(aes(x = Family, y = mean_colonization_percent, fill = recipient),
stat = "identity", position = "dodge") +
scale_fill_manual(values = colors) +
geom_text(aes(label = paste0(round(mean_colonization_percent, 2), "%")),
position = position_dodge(width = 0.9),
vjust = -0.5, size = 3) +
geom_text(aes(label = total_instances),
position = position_dodge(width = 0.9),
vjust = 1.5, size = 3) +
xlab("Family") +
ylab("Mean Colonization Success (%)") +
ggtitle("ASV Colonization Success by Family and Recipient") +
theme_minimal() +
theme(legend.position = "right")
colonization_success_plot
# Bar plot totalling the colonization instances
colors <- c("preAbx" = "red", "postAbxV1" = "blue", "postAbxV2" = "green")
# Create the bar plot
colonization_success_plot <- dataASVorigin1.0_summary %>%
ggplot(aes(x = Family, y = total_colonize_percent, fill = recipient)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(total_colonize_percent, 2), "%")),
position = position_stack(vjust = 0.5),
size = 3, color = "black") +
scale_fill_manual(values = c("XEA-pre" = "red", "XEA-post-V1" = "blue", "XEA-post-V2" = "green")) +
xlab("Family") +
ylab("Colonization Success Rate (%)") +
ggtitle("Colonization Success Rate by Family and Community") +
theme_minimal() +
theme(legend.position = "bottom") +
scale_y_continuous(labels = scales::percent)
colonization_success_plot
# Calculate the total number of colonization instances for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
group_by(ASVnum) %>%
summarize(
total_colonize_count = sum(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
View(dataASVorigin1.0)
# Create new columns for ability to colonize pre/postv1/postv2
dataASVorigin1.0 <- dataASVorigin %>%
filter(community_mixture == "donor+recipient" & colonization_status == "Colonizer_Donor") %>%
mutate(
can_colonize_preAbx = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-pre",
"1",
"0"
),
can_colonize_postAbxV1 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V1",
"1",
"0"
),
can_colonize_postAbxV2 = ifelse(
ASVnum %in% asvs_in_donor & recipient == "XEA-post-V2",
"1",
"0"
)
)
# Calculate the total number of colonization instances for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
group_by(ASVnum) %>%
summarize(
total_colonize_count = sum(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# Create new columns for ability to colonize pre/postv1/postv2
dataASVorigin1.0 <- dataASVorigin %>%
filter(community_mixture == "donor+recipient" & colonization_status == "Colonizer_Donor") %>%
mutate(
can_colonize_preAbx = ifelse(
recipient == "XEA-pre",
"1",
"0"
),
can_colonize_postAbxV1 = ifelse(
recipient == "XEA-post-V1",
"1",
"0"
),
can_colonize_postAbxV2 = ifelse(
recipient == "XEA-post-V2",
"1",
"0"
)
)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# Calculate the total number of colonization instances for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
group_by(ASVnum) %>%
summarize(
total_colonize_count = sum(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# calculate the total colonize count and percentage for each ASV
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
mutate(
total_colonize_count = rowSums(select(., starts_with("can_colonize")) == "1"),
total_colonize_percent = total_colonize_count / 3 * 100
)
# Create the bar plot for individual ASVs
colors <- c("preAbx" = "red", "postAbxV1" = "blue", "postAbxV2" = "green")
colonization_success_individual_plot <- dataASVorigin1.0_summary %>%
ggplot(aes(x = reorder(ASVnum, -total_colonize_percent), y = total_colonize_percent)) +
geom_bar(aes(fill = "Total"), stat = "identity") +
geom_bar(aes(fill = can_colonize_preAbx), stat = "identity", position = "stack") +
geom_bar(aes(fill = can_colonize_postAbxV1), stat = "identity", position = "stack") +
geom_bar(aes(fill = can_colonize_postAbxV2), stat = "identity", position = "stack") +
scale_fill_manual(values = colors) +
xlab("ASVnum") +
ylab("Colonization Success Rate (%)") +
ggtitle("Colonization Success Rate for Individual ASVs") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(total_colonize_percent, 2), "%")),
vjust = -0.5, size = 3, color = "black", position = position_stack(vjust = 0.5)) +
geom_text(aes(label = total_colonize_count), vjust = 1.5, size = 3, color = "black", position = position_stack(vjust = 0.5))
colonization_success_individual_plot
library(dplyr)
library(ggplot2)
library(scales)
install.packages("purrr")
install.packages("purrr")
library(dplyr)
library(ggplot2)
library(scales)
# Calculate the average colonization success rate for each family
dataASVorigin1.0_summary <- dataASVorigin1.0 %>%
group_by(Family) %>%
summarize(
avg_colonize_preAbx = mean(as.numeric(can_colonize_preAbx)),
avg_colonize_postAbxV1 = mean(as.numeric(can_colonize_postAbxV1)),
avg_colonize_postAbxV2 = mean(as.numeric(can_colonize_postAbxV2))
)
# Melt the summary data for plotting
dataASVorigin1.0_summary_melted <- dataASVorigin1.0_summary %>%
pivot_longer(
cols = starts_with("avg_colonize"),
names_to = "recipient",
values_to = "avg_colonize_percent"
)
# Create the bar plot for family colonization success rate
colors <- c("preAbx" = "red", "postAbxV1" = "blue", "postAbxV2" = "green")
colonization_success_family_plot <- dataASVorigin1.0_summary_melted %>%
ggplot(aes(x = reorder(Family, -avg_colonize_percent), y = avg_colonize_percent, fill = recipient)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = colors) +
xlab("Family") +
ylab("Colonization Success Rate (%)") +
ggtitle("Colonization Success Rate by Family and Community") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels = scales::percent)
colonization_success_family_plot
View(dataASVorigin1.0_summary_melted)
View(datae0041meta_mixID)
#start with datae0041meta
#using all of the donor ASVs so community_mixture=="donorOnly"
frequency_colonization <- datae0041meta_mixID %>% filter(community_mixture=="donorOnly")
#assign column with values based on whether it was able to colonize pre/postV1/postV2
dataASVorigin <- foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donorOnly") %>% pull(well)), .combine="rbind") %do% {
# Subset the data for the current donor+recipient community
subset_data <- frequency_colonization %>% filter(well == i)
i_donor = unique(subset_data$donor)
i_recipient = unique(subset_data$recipient)
i_replicate = unique(subset_data$replicate)
# Identify the corresponding donor_only and recipient_only wells
#corresponding_donor_well <- subset_data$well[subset_data$community_mixture == "donor_only"]
corresponding_mixture_well <- frequency_colonization %>%
filter(donor == i_donor & community_mixture == "donor+recipient" & replicate == i_replicate)
corresponding_recipient_well <- frequency_colonization %>%
filter(recipient == i_recipient & community_mixture == "recipient_only" & replicate == i_replicate)
# Identify ASVnums for each well
#asvs_in_donor_recipient <- subset_data$ASVnum[subset_data$community_mixture == "donor+recipient"]
asvs_in_donor_recipient <- unique(subset_data$ASVnum)
#asvs_in_donor <- subset_data$ASVnum[subset_data$well == corresponding_donor_well]
asvs_in_donor <- unique(corresponding_donor_well$ASVnum)
#asvs_in_recipient <- subset_data$ASVnum[subset_data$well == corresponding_recipient_well]
asvs_in_recipient <- unique(corresponding_recipient_well$ASVnum)
# Colonization Status Update
subset_data <- subset_data %>% filter(community_mixture == "donor+recipient") %>%
mutate(colonization_status = case_when(
asvs_in_donor_recipient %in% asvs_in_donor & !(asvs_in_donor_recipient %in% asvs_in_recipient) ~ "Colonizer_Donor",
asvs_in_donor_recipient %in% asvs_in_recipient & !(asvs_in_donor_recipient %in% asvs_in_donor) ~ "Native_Recipient",
asvs_in_donor_recipient %in% asvs_in_donor & asvs_in_donor_recipient %in% asvs_in_recipient ~ "Hybrid_D+R",
TRUE ~ "Weirdo_Neither"
))
# Append the results
return(subset_data)
}
#start with datae0041meta
#using all of the donor ASVs so community_mixture=="donorOnly"
frequency_colonization <- datae0041meta_mixID %>% filter(community_mixture=="donorOnly")
View(frequency_colonization)
#start with datae0041meta
#using all of the donor ASVs so community_mixture=="donor_only"
frequency_colonization <- datae0041meta_mixID %>% filter(community_mixture=="dono_only")
#start with datae0041meta
#using all of the donor ASVs so community_mixture=="donor_only"
frequency_colonization <- datae0041meta_mixID %>% filter(community_mixture=="donor_only")
#assign column with values based on whether it was able to colonize pre/postV1/postV2
frequency_colonization <- foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
# Subset the data for the current donor+recipient community
subset_data <- frequency_colonization %>% filter(well == i)
i_donor = unique(subset_data$donor)
i_recipient = unique(subset_data$recipient)
i_replicate = unique(subset_data$replicate)
# Identify the corresponding donor_only and recipient_only wells
#corresponding_donor_well <- subset_data$well[subset_data$community_mixture == "donor_only"]
corresponding_mixture_well <- frequency_colonization %>%
filter(donor == i_donor & community_mixture == "donor+recipient" & replicate == i_replicate)
corresponding_recipient_well <- frequency_colonization %>%
filter(recipient == i_recipient & community_mixture == "recipient_only" & replicate == i_replicate)
# Identify ASVnums for each well
#asvs_in_donor_recipient <- subset_data$ASVnum[subset_data$community_mixture == "donor+recipient"]
asvs_in_donor_recipient <- unique(subset_data$ASVnum)
#asvs_in_donor <- subset_data$ASVnum[subset_data$well == corresponding_donor_well]
asvs_in_donor <- unique(corresponding_donor_well$ASVnum)
#asvs_in_recipient <- subset_data$ASVnum[subset_data$well == corresponding_recipient_well]
asvs_in_recipient <- unique(corresponding_recipient_well$ASVnum)
# Colonization Status Update
subset_data <- subset_data %>% filter(community_mixture == "donor+recipient") %>%
mutate(colonization_status = case_when(
asvs_in_donor_recipient %in% asvs_in_donor & !(asvs_in_donor_recipient %in% asvs_in_recipient) ~ "Colonizer_Donor",
asvs_in_donor_recipient %in% asvs_in_recipient & !(asvs_in_donor_recipient %in% asvs_in_donor) ~ "Native_Recipient",
asvs_in_donor_recipient %in% asvs_in_donor & asvs_in_donor_recipient %in% asvs_in_recipient ~ "Hybrid_D+R",
TRUE ~ "Weirdo_Neither"
))
# Append the results
return(subset_data)
}
#start with datae0041meta
#using all of the donor ASVs so community_mixture=="donor_only"
frequency_colonization <- datae0041meta_mixID %>% filter(community_mixture=="donor_only")
foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
i="A1"
subset_data <- frequency_colonization %>% filter(well == i)
# Subset the data for the current donor+recipient community
subset_data <- frequency_colonization %>% filter(well == i)
i_donor = unique(subset_data$donor)
foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
# Subset the data for the current donor+recipient community
# Subset the data for the current donor+recipient community
subset_data <- frequency_colonization %>% filter(well == i)
i="A1"
i="A1"
i_donor = unique(subset_data$donor)
i_recipient = unique(subset_data$recipient)
#start with datae0041meta
#using all of the donor ASVs so community_mixture=="donor_only"
frequency_colonization <- datae0041meta_mixID
foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
# Subset the data for the current donor_only community
subset_data <- frequency_colonization %>% filter(well == i)
i="A1"
i="A1"
i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
# Subset the data for the current donor_only community
subset_data <- frequency_colonization %>% filter(well == i)
View(subset_data)
View(subset_data)
View(subset_data)
View(seqsTrimmed)
#assign column with values based on whether it was able to colonize pre/postV1/postV2
frequency_colonization <- foreach(i=unique(frequency_colonization %>% filter(community_mixture=="donor_only") %>% pull(well)), .combine="rbind") %do% {
# Subset the data for the current donor_only community
subset_data <- frequency_colonization %>% filter(well == i)
i="A1"
i_donor = unique(subset_data$donor)
i_recipient = unique(subset_data$recipient)
i_replicate = unique(subset_data$replicate)
# Identify the corresponding donor_only and recipient_only wells
#corresponding_donor_well <- subset_data$well[subset_data$community_mixture == "donor_only"]
corresponding_mixture_well <- frequency_colonization %>%
filter(donor == i_donor & community_mixture == "donor+recipient" & replicate == i_replicate)
corresponding_recipient_well <- frequency_colonization %>%
filter(recipient == i_recipient & community_mixture == "recipient_only" & replicate == i_replicate)
# Identify ASVnums for each well
#asvs_in_donor_recipient <- subset_data$ASVnum[subset_data$community_mixture == "donor+recipient"]
asvs_in_donor_recipient <- unique(subset_data$ASVnum)
#asvs_in_donor <- subset_data$ASVnum[subset_data$well == corresponding_donor_well]
asvs_in_donor <- unique(corresponding_donor_well$ASVnum)
#asvs_in_recipient <- subset_data$ASVnum[subset_data$well == corresponding_recipient_well]
asvs_in_recipient <- unique(corresponding_recipient_well$ASVnum)
# Colonization Status Update
subset_data <- subset_data %>% filter(community_mixture == "donor+recipient") %>%
mutate(colonization_status = case_when(
asvs_in_donor_recipient %in% asvs_in_donor & !(asvs_in_donor_recipient %in% asvs_in_recipient) ~ "Colonizer_Donor",
asvs_in_donor_recipient %in% asvs_in_recipient & !(asvs_in_donor_recipient %in% asvs_in_donor) ~ "Native_Recipient",
asvs_in_donor_recipient %in% asvs_in_donor & asvs_in_donor_recipient %in% asvs_in_recipient ~ "Hybrid_D+R",
TRUE ~ "Weirdo_Neither"
))
# Append the results
return(subset_data)
}
View(datae0041meta_mixID)
View(subset_data)
View(subset_data)
print(subset_data)
View(dataASVorigin1.0)
View(dataASVorigin1.0)
View(dataASVorigin1.0)
View(datae0041meta_mixID)
View(datae0041meta_mixID)
View(datae0041meta_mixID)
#Import libraries
library(gridExtra)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(cowplot)
library(VennDiagram)
library(patchwork)
library(gridExtra)
library(foreach)
# Set up file paths
outPath = "analysis/out-cleaned" #out
dataframePath = "data/ps_all.txt.gz" #raw data
appendCol_path = "data/metadatae0041.tsv" #metadata
KCHpalette_path = "config/KCHcolors-Silva-partial.txt" #color palette
referenceASV = "config/referenceASVs-e0026.txt" #for appending ASV codes
getwd()
setwd("C:/Users/autum/16S-e0040-e0041-e0043/")
getwd()
#Import libraries
library(gridExtra)
library(tidyverse)
library(dplyr)
print("hi")
print("hi")
